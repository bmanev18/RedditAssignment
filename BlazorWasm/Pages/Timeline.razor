@page "/"
@using global::Shared.Models
@using HttpClients.Interfaces
@using System.ComponentModel.DataAnnotations
@inject IPostService PostService
@inject NavigationManager NavManager;
<h3>Timeline</h3>
<div class="filter-bar">
    <div class="filters-container">
        <img src="img/@(_doShowFilters ? "clear_" : "")funnel.png" class="funnel" @onclick="@(() => _doShowFilters = !_doShowFilters)" alt="Funnel"/>
        @if (_doShowFilters)
        {
            <div class="filter">
                <label>Username:</label>
                <input type="text" @bind="_usernameFilter"/>
            </div>
            @*<div class="filter">
                <label>User id:</label>
                <input type="number" @bind="userIdFilter"/>
            </div>*@
            @*<div class="filter">
                <label>Is completed?</label>
                <select @bind="completedStatusFilter">
                    <option value="all">All</option>
                    <option value="true">Yes</option>
                    <option value="false">No</option>
                </select>
            </div>*@
            <div class="filter">
                <label>Title contains:</label>
                <input type="text" @bind="_titleContainsFilter"/>
            </div>
        }
    </div>
</div>

<div>
    <button @onclick="OnInitializedAsync">Load</button>
</div>






@if (posts == null)
{
    <label> @message </label>
}
else if (!posts.Any())
{
    <label> No Posts to Display </label>
}
else
{
    @foreach (var p in posts)
    {
        <div class="post-card" @onclick="@(() => NavManager.NavigateTo($"/OpenPost/{p.Id}"))">
            <div class="post-title">
                <label>Title :@p.Title</label>
            </div>
            <div class="post-creator">
                <label> Created by: @p.Owner.Username</label>
            </div>
            <div class="post-body">
                <label>@p.Body</label>
            </div>
        </div>
    }
}









@code {
    private IEnumerable<Post>? posts;
    private string message = "";

    private bool _doShowFilters = false;
    private string? _usernameFilter;
    private string? _titleContainsFilter;

    protected override async Task OnInitializedAsync()
    {
        message = "";
        try
        {
            posts = await PostService.getAsync(_titleContainsFilter, _usernameFilter);
        }
        catch (Exception e)
        {
            message = e.Message;
        }

    }

}